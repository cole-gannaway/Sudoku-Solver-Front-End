{"version":3,"sources":["components/SudokuCell/SudokuCell.tsx","components/SudokuBoard/SudokuBoard.tsx","components/SudokuPossbileValue/SudokuPossbileValue.tsx","components/SudokuOptions/SudokuOptions.tsx","components/Main/Main.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["SudokuCell","props","handleChange","bind","type","value","this","onChange","event","x","y","target","Component","CLASS_NAMES","SudokuBoard","dynamicRows","rows","map","row","i","dynamicRow","val","j","className","generateTDClassName","key","generateTRClassName","topOrBottom","boardWidth","leftOrRight","SudokuPossbileValue","style","width","newVal","handlePossbileValueChange","index","SudokuOptions","possibleValues","possbileValues","possibleValue","Main","emptyBoard","ExampleJson","defaultPossibleValues","createPossibleValues","defaultWidth","state","numberOfThreads","timeOut","status","setBoard","setBoardWidth","setPossibleValues","createEmptyBoard","cloneRows","clonePossibleValues","handleDataChange","handleWidthChange","handlePossibleValueChange","handleClear","handleTimeoutChange","handleNumberOfThreadsChange","handleSolve","sendSolveBoard","debug","onClick","newWidth","parseInt","newRows","setState","newPossibleValues","newStatus","n","push","toString","cloned","repeat","console","log","requestObj","board","config","timeoutSeconds","origPossibleValues","clonedPossibleValues","length","origRows","url","fetch","method","headers","body","JSON","stringify","then","response","json","catch","errorMessage","setStatus","solution","parse","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.3627b107.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\ntype SudokuCellProps = {\n  value: string,\n  x: number,\n  y: number,\n  handleChange: (i: number, j: number, val: string) => void\n};\n\nclass SudokuCell extends Component<SudokuCellProps, any> {\n  constructor(props: SudokuCellProps) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  public render() {\n    return <div><input type=\"text\" value={this.props.value} onChange={this.handleChange}></input></div>;\n  }\n  public handleChange(event: any) {\n    this.props.handleChange(this.props.x, this.props.y, event.target.value);\n  }\n}\n\nexport default SudokuCell;\n","import React, { Component } from 'react';\nimport SudokuCell from '../SudokuCell/SudokuCell';\n\n\ntype SudokuBoardProps = {\n  rows: Array<Array<string>>;\n  boardWidth: number,\n  handleChange: (i: number, j: number, val: string) => void\n};\n\nconst CLASS_NAMES = {\n  borderLeft: 'borderLeft',\n  borderTop: 'borderTop',\n  borderRight: 'borderRight',\n  borderBottom: 'borderBottom',\n}\n\nclass SudokuBoard extends Component<SudokuBoardProps, any> {\n  public render() {\n    const rows = this.props.rows;\n    const dynamicRows = rows.map((row, i) => {\n      const dynamicRow = row.map((val, j) => {\n        return (<td className={this.generateTDClassName(i, j)} key={'cell' + j}><SudokuCell value={val} x={i} y={j} handleChange={this.props.handleChange} ></SudokuCell></td>);\n      });\n      return (<tr className={this.generateTRClassName(i)} key={'row' + i}>{dynamicRow}</tr>);\n\n    });\n    return <div>\n      <table className=\"table\">\n        <tbody>\n          {dynamicRows}\n        </tbody>\n      </table>\n    </div >;\n  }\n  public generateTDClassName(i: number, j: number) {\n\n    var topOrBottom = '';\n    // top border\n    if (i === 0) {\n      topOrBottom = CLASS_NAMES.borderTop;\n    }\n    // bottom border\n    else if ((i + 1) % this.props.boardWidth === 0) {\n      topOrBottom = CLASS_NAMES.borderBottom;\n    }\n    var leftOrRight = '';\n    // left border\n    if (j === 0) {\n      leftOrRight = CLASS_NAMES.borderLeft;\n    }\n    // right border\n    else if ((j + 1) % this.props.boardWidth === 0) {\n      leftOrRight = CLASS_NAMES.borderRight;\n    }\n    return 'td ' + topOrBottom + ' ' + leftOrRight;\n  }\n  public generateTRClassName(i: number) {\n    // top border\n    if (i === 0) {\n      return CLASS_NAMES.borderTop;\n    }\n    // bottom border\n    else if ((i + 1) % this.props.boardWidth === 0) {\n      return CLASS_NAMES.borderBottom;\n    }\n  }\n}\n\nexport default SudokuBoard;\n","import React, { Component } from 'react';\n\ntype SudokuPossbileValueProps = {\n  //\n  value: string,\n  index: number\n  handlePossbileValueChange(i: number, value: string): void\n};\n\nclass SudokuPossbileValue extends Component<SudokuPossbileValueProps, any> {\n  constructor(props: SudokuPossbileValueProps) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n  public render() {\n\n    return <div>\n      <input type=\"text\" value={this.props.value} onChange={this.handleChange} style={{ width: '30px' }}></input>\n    </div>;\n  }\n  public handleChange(event: React.ChangeEvent<HTMLInputElement>) {\n    const newVal = event.target.value;\n    this.props.handlePossbileValueChange(this.props.index, newVal);\n  }\n}\n\nexport default SudokuPossbileValue;\n","import React, { Component } from 'react';\nimport SudokuPossbileValue from '../SudokuPossbileValue/SudokuPossbileValue';\n\ntype SudokuOptionsProps = {\n  //\n  possbileValues: Array<string>,\n  handlePossbileValueChange(i: number, value: string): void\n};\n\nclass SudokuOptions extends Component<SudokuOptionsProps, any> {\n  public render() {\n    const possibleValues = this.props.possbileValues.map((possibleValue, i) => {\n      return <td className=\"td\" key={'possbileVal' + i}><SudokuPossbileValue value={possibleValue} index={i} handlePossbileValueChange={this.props.handlePossbileValueChange}></SudokuPossbileValue></td>\n    })\n    return <div >\n      <p>Possbile Cell Values</p>\n      <table className=\"table\">\n        <tbody>\n          <tr >\n            {possibleValues}\n          </tr>\n        </tbody>\n      </table>\n    </div>;\n  }\n\n\n\n}\n\nexport default SudokuOptions;\n","import React, { Component, ChangeEvent } from 'react';\nimport SudokuBoard from '../SudokuBoard/SudokuBoard';\nimport SudokuOptions from '../SudokuOptions/SudokuOptions';\nimport { ISudokuSolveRequest } from '../../interfaces/ISudokuSolveRequest';\nimport { ISudokuSolveResponse } from '../../interfaces/ISudokuSolveResponse';\n\nimport ExampleJson from '../test/9by9.json'\n\n\ntype MainProps = {\n  //\n};\n\nclass Main extends Component<MainProps, { rows: Array<Array<string>>, boardWidth: number, possibleValues: Array<string>, numberOfThreads: number, timeOut: number, status: string }> {\n\n  constructor(props: MainProps) {\n    super(props);\n    const defaultWidth = 3;\n    const emptyBoard = ExampleJson.rows;\n    const defaultPossibleValues = this.createPossibleValues(defaultWidth * defaultWidth)\n    this.state = {\n      rows: emptyBoard,\n      boardWidth: defaultWidth,\n      possibleValues: defaultPossibleValues,\n      numberOfThreads: 1,\n      timeOut: 10,\n      status: ''\n    }\n    // setters\n    this.setBoard = this.setBoard.bind(this);\n    this.setBoardWidth = this.setBoardWidth.bind(this);\n    this.setPossibleValues = this.setPossibleValues.bind(this);\n\n    // generators\n    this.createEmptyBoard = this.createEmptyBoard.bind(this);\n    this.createPossibleValues = this.createPossibleValues.bind(this);\n\n    // clone\n    this.cloneRows = this.cloneRows.bind(this);\n    this.clonePossibleValues = this.clonePossibleValues.bind(this);\n\n    // handlers\n    this.handleDataChange = this.handleDataChange.bind(this);\n    this.handleWidthChange = this.handleWidthChange.bind(this);\n    this.handlePossibleValueChange = this.handlePossibleValueChange.bind(this);\n    this.handleClear = this.handleClear.bind(this);\n    this.handleTimeoutChange = this.handleTimeoutChange.bind(this);\n    this.handleNumberOfThreadsChange = this.handleNumberOfThreadsChange.bind(this);\n    this.handleSolve = this.handleSolve.bind(this);\n\n    // utils\n    this.sendSolveBoard = this.sendSolveBoard.bind(this);\n\n    // debug\n    this.debug = this.debug.bind(this);\n\n\n  }\n  public render() {\n\n    return <div className=\"center\">\n      <div >\n        <h2>Board Information</h2>\n        <div>\n          Board Width <input type=\"number\" value={this.state.boardWidth} onChange={this.handleWidthChange}></input>\n        </div>\n      </div>\n\n      <div>\n        <SudokuBoard rows={this.state.rows} boardWidth={this.state.boardWidth} handleChange={this.handleDataChange}></SudokuBoard>\n      </div>\n      <div>\n        <h2>Solver Configuration</h2>\n        <div>Number of Threads <input type=\"number\" value={this.state.numberOfThreads} onChange={this.handleNumberOfThreadsChange}></input></div>\n        <div>Timeout Seconds <input type=\"number\" value={this.state.timeOut} onChange={this.handleTimeoutChange}></input></div>\n        <SudokuOptions possbileValues={this.state.possibleValues} handlePossbileValueChange={this.handlePossibleValueChange}></SudokuOptions>\n      </div>\n      <div>\n        <button onClick={this.handleClear}>Clear</button>\n        <button onClick={this.handleSolve}>Solve</button>\n        <div>Status: {this.state.status}</div>\n      </div>\n      {/* <button onClick={this.debug}>Debug</button> */}\n    </div>;\n  }\n  public handleWidthChange(event: ChangeEvent<HTMLInputElement>) {\n    const newWidth = parseInt(event.target.value)\n    this.setBoardWidth(newWidth);\n    const emptyBoard = this.createEmptyBoard(newWidth * newWidth);\n    this.setBoard(emptyBoard);\n    const defaultPossibleValues = this.createPossibleValues(newWidth * newWidth);\n    this.setPossibleValues(defaultPossibleValues);\n  }\n\n\n\n  public handleClear() {\n    const emptyBoard = this.createEmptyBoard(this.state.boardWidth * this.state.boardWidth);\n    this.setBoard(emptyBoard);\n  }\n\n  public setBoard(newRows: Array<Array<string>>) {\n    this.setState({ rows: newRows });\n  }\n\n  public setBoardWidth(newWidth: number) {\n    this.setState({ boardWidth: newWidth });\n  }\n\n  public setPossibleValues(newPossibleValues: Array<string>) {\n    this.setState({ possibleValues: newPossibleValues });\n  }\n\n  public setStatus(newStatus: string) {\n    this.setState({ status: newStatus })\n  }\n\n  public createEmptyBoard(n: number) {\n    const rows = [];\n    for (var i = 0; i < n; i++) {\n      const row = [];\n      for (var j = 0; j < n; j++) {\n        row.push('');\n      }\n      rows.push(row);\n    }\n    return rows;\n  }\n\n  public createPossibleValues(n: number) {\n    const possibleValues = [];\n    for (var i = 1; i <= n; i++) {\n      possibleValues.push(i.toString());\n    }\n    return possibleValues;\n  }\n  public handleDataChange(i: number, j: number, val: string) {\n    const cloned = this.cloneRows();\n    cloned[i][j] = val.repeat(1);\n    console.log('changed <' + i + ',' + j + '> to ' + val);\n    this.setBoard(cloned);\n  }\n\n  public handlePossibleValueChange(i: number, val: string) {\n    const cloned = this.clonePossibleValues();\n    cloned[i] = val.repeat(1);\n    console.log('changed ' + i + ' to ' + val);\n    this.setPossibleValues(cloned);\n  }\n  public handleTimeoutChange(event: React.ChangeEvent<HTMLInputElement>) {\n    const newVal = parseInt(event.target.value);\n    this.setState({\n      timeOut: newVal\n    })\n  }\n  public handleNumberOfThreadsChange(event: React.ChangeEvent<HTMLInputElement>) {\n    const newVal = parseInt(event.target.value);\n    this.setState({\n      numberOfThreads: newVal\n    })\n  }\n\n  public handleSolve() {\n    const requestObj: ISudokuSolveRequest = {\n      board: {\n        rows: this.state.rows,\n        possibleValues: this.state.possibleValues\n      },\n      config: {\n        numberOfThreads: this.state.numberOfThreads,\n        timeoutSeconds: this.state.timeOut\n      }\n    };\n    this.sendSolveBoard(requestObj);\n  }\n\n  public clonePossibleValues() {\n    const origPossibleValues = this.state.possibleValues;\n    const clonedPossibleValues = [];\n    for (var i = 0; i < origPossibleValues.length; i++) {\n      clonedPossibleValues.push(origPossibleValues[i].repeat(1));\n    }\n    return clonedPossibleValues;\n  }\n  public cloneRows() {\n    const origRows = this.state.rows;\n    const rows = [];\n    for (var i = 0; i < origRows.length; i++) {\n      const row = [];\n      for (var j = 0; j < origRows.length; j++) {\n        row.push(origRows[i][j].repeat(1));\n      }\n      rows.push(row);\n    }\n    return rows;\n  }\n  public debug() {\n    console.log('debugging');\n\n    console.log(this.state);\n  }\n\n  async sendSolveBoard(requestObj: ISudokuSolveRequest) {\n    console.log('sending solve request with the following data');\n    console.log(requestObj);\n\n    const proxyurl = \"https://cors-anywhere.herokuapp.com/\";\n    const url = \"https://ohq0hxesze.execute-api.us-east-2.amazonaws.com/default/Sudoku-Solver\"; // site that doesn’t send Access-Control-*\n\n    const response = await fetch(proxyurl + url, {\n      method: 'POST', // or 'PUT'\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(requestObj),\n    }).then(response => response.json())\n      .catch(() => console.log(\"Can’t access \" + url + \" response. Blocked by browser?\"))\n    if (response.errorMessage) {\n      this.setStatus(response.errorMessage);\n      console.log(response.errorMessage);\n    } else {\n      const solution: ISudokuSolveResponse = JSON.parse(response);\n      this.setBoard(solution.rows);\n      this.setStatus('Succesfully Solved!');\n    }\n  }\n}\n\nexport default Main;\n","import React from 'react';\nimport './App.css';\nimport Main from './components/Main/Main';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Main></Main>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}